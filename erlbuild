#!/usr/bin/env escript

-export([main/1]).

% To avoid dependency with kernel.  Might need to rethink later.
-record(file_info,
  {size, type, access, atime, mtime, ctime, mode, links, major_device,
    minor_device, inode, uid, gid}).

-define(TARGET_DESC, [
    {other_targets,    []},
    {external_ebfiles, []},
    {src_dir,          src},
    {sources,          "*.erl"},
    {includes,         [include]},
    {dest_dir,         discover},
    {dest_type,        beams},
    {exec_name,        discover}]).
    % Future:
    % - before_script -> defaults to none
    % - after_script -> defaults to none

main(Params) ->
  {EBFile, Targets} = process_commandline(Params),
  estat("Processing ~p", [EBFile]),
  process_ebfile(EBFile, Targets),
  estat("Done.").

process_commandline(["-f" | [EBFile | Targs]]) ->
  {EBFile, [list_to_atom(T)||T<-Targs]};
process_commandline(["-f", EBFile]) ->
  {EBFile, [all]};
process_commandline(["-f"]) ->
  abort("No ebfile specified.");
process_commandline([]) ->
  {discovered_ebfile(), [all]};
process_commandline(Targs) ->
  {discovered_ebfile(), [list_to_atom(T)||T<-Targs]}.

discovered_ebfile() ->
  {ok, Dir} = file:get_cwd(),
  discovered_ebfile(Dir).
discovered_ebfile(Dir) ->
  FN1 = filename:join([Dir, "ebfile"]),
  FN2 = filename:join([Dir, ".ebfile"]),
  case filelib:is_file(FN1) of
    false ->
      case filelib:is_file(FN2) of
        false ->
          abort("No ebfile (or .ebfile) found in ~p.", [Dir]);
        true -> FN2
      end;
    true -> FN1
  end.

get_targetdefs(FileName) ->
  case file:consult(FileName) of
    {ok, []} ->
      abort("No targets defined in ~p. Aborting.", [FileName], 4);
    {ok, Terms} ->
      [preformat_target(T) || T <- Terms];
    {error, Err} when is_atom(Err) ->
      abort("Problem opening ~p. (~p). Aborting.", [FileName, Err], 2);
    {error, {Line, Mod, Desc}} ->
      abort("Error ~p on line ~p of ~p.",
        [Mod:format_error(Desc), Line, FileName], 3)
  end.

preformat_target({TName, TDef}) ->
  % TODO: Warning on unused
  {TName, [{Name, proplists:get_value(Name, TDef, Default)} ||
      {Name, Default} <- ?TARGET_DESC]}.

process_ebfile(EBFile, Targets) ->
  TargetDefs = get_targetdefs(EBFile),
  [process_target(T, TargetDefs, EBFile) || T <- Targets].

process_target(ToProcess, Defs, EBFile) when is_list(ToProcess) ->
  process_target(list_to_atom(ToProcess), Defs, EBFile);
process_target(ToProcess, Defs, EBFile) ->
  case proplists:get_value(ToProcess, Defs) of
    undefined ->
      case ToProcess of
        all ->
          [{FirstTarget, FirstDefs} | _] = Defs,
          execute_targetdef(FirstTarget, FirstDefs, Defs, EBFile);
        _ ->
          abort("Target '~p' undefined in ~p. Aborting.", [ToProcess,EBFile], 4)
      end;
    FoundDefs ->
      execute_targetdef(ToProcess, FoundDefs, Defs, EBFile)
  end.

execute_targetdef(Name, Def, AllDefs, EBFile) ->
  run_external_ebfiles(Def, EBFile),
  ok.
  % (f) Run before-script
  % 1. External ebfiles
  % 2. Other targets
  % 3. Current sources compiled
  % 3.5 Exit with errors if applicable
  % 4. Turned into exec if appropriate
  % (f) Run after-script
  
run_external_ebfiles(Def, EBFile) ->
  [run_external(E, EBFile) ||
    E <- proplists:unfold(proplists:get_value(external_ebfiles, Def))].

run_external({ExFile, true}, Curr) ->
  run_external({ExFile, []}, Curr);
run_external({ExFile, []}, Curr) ->
  main(["-f", ebf_relative_to_current(ExFile, Curr)]);
run_external({ExFile, Target}, Curr) when not is_list(Target) ->
  run_external({ExFile, [Target]}, Curr);
run_external({ExFile, Targets}, Curr) ->
  main(["-f" | [ebf_relative_to_current(ExFile, Curr) | to_strings(Targets)]]).


ebf_relative_to_current(ExFile, Curr) when is_atom(ExFile) ->
  ebf_relative_to_current(to_string(ExFile), Curr);
ebf_relative_to_current([F|_] = ExFile, Curr) ->
  CurrDir = filename:dirname(Curr),
  ExLoc =
    case F of
      $/ -> ExFile;
      _ -> filename:join([CurrDir, ExFile])
    end,
  case filelib:is_dir(ExLoc) of
    true -> discovered_ebfile(ExLoc);
    false ->
      case filelib:is_file(ExLoc) of
        false ->
          abort("Could not find external ebfile at or for ~p", [ExLoc]);
        true -> ExLoc
      end
  end.



to_strings(In) ->
  [to_string(I) || I <- In].

to_string(In) when is_atom(In) ->
  atom_to_list(In);
to_string(In) when is_binary(In) ->
  binary_to_list(In);
to_string([H|_] = In) when is_integer(H) ->
  In.
% TODO: In general, add in integers etc.

%  ScriptDir = filename:dirname(escript:script_name()),
%  LastModTimes = saved_modtimes(ScriptDir),
%  BinDir = filename:join([ScriptDir,"bin"]),
%  EBinDir = filename:join([ScriptDir,".cmd-ebin"]),
%  ok = ensure_dir(EBinDir),
%  SrcDir = filename:join([ScriptDir, ?SRC_DIR]),
%  Compiled = lists:map(
%    fun(S) ->
%        ensure_compiled(S, LastModTimes, SrcDir, EBinDir)
%    end, ?CMD_SOURCES),
%  Warnings = lists:flatten(
%    [Warns || {_, {_, _, Warns}} <- Compiled, Warns =/= nochange]),
%  Errors = lists:flatten([Errs || {_, {error, Errs, _}} <- Compiled]),
%  case Warnings of
%    [] -> nice;
%    W -> emit_errs("Warnings", W)
%  end,
%  case Errors of
%    [] ->
%      case (length([true||{_,{ok,_,nochange}}<-Compiled]) == length(Compiled))
%        and filelib:is_file([BinDir, "/zerl"]) of
%        true -> nothing_to_do;
%        false ->
%          create_executable(EBinDir, BinDir,
%            [atom_to_list(MN)++".beam" || {_,{ok,MN,_}} <- Compiled],
%            "zerl"),
%          preserve_modtimes(ScriptDir, [{MN, MT} || {MT, {ok, MN,_}} <- Compiled])
%      end;
%    E ->
%      emit_errs("Errors", E),
%      halt(1)
%  end.

create_executable(EBinDir, BinDir, Beams, ExecName) ->
  ok = ensure_dir(BinDir),

  ZippedFN = BinDir ++ "/.tmp_zerl",
  FinFN = BinDir ++ "/" ++ ExecName,
  {ok, _} = zip:create(ZippedFN, Beams, [{cwd,EBinDir}, {uncompress, all}]),
  {ok, Zipped} = file:open(ZippedFN, [read, binary, raw, read_ahead]),
  {ok, Final} = file:open(FinFN, [write, binary]),
  file:write(Final, <<"#!/usr/bin/env escript\n%%! -noshell\n">>),
  {ok, _} = file:copy(Zipped, Final),
  file:close(Zipped),
  file:close(Final),
  file:delete(ZippedFN),
  make_exec(FinFN).

make_exec(FName) ->
  {ok, Inf} = file:read_file_info(FName),
  Mode = Inf#file_info.mode bor 8#00010 bor 8#00100,
  ok = file:write_file_info(FName, Inf#file_info{mode=Mode}).

ensure_dir(D) ->
  ok = filelib:ensure_dir(D),
  case file:make_dir(D) of
    ok -> ok;
    {error, eexist} -> ok;
    Other -> Other
  end.

saved_modtimes(ScriptDir) ->
  MTFN = filename:join([ScriptDir, ".modtimes"]),
  case filelib:is_file(MTFN) of
    true ->
      {ok, ModTimesBin} = file:read_file(MTFN),
      binary_to_term(ModTimesBin);
    false ->
      []
  end.

preserve_modtimes(ScriptDir, Vals) ->
  MTFN = filename:join([ScriptDir, ".modtimes"]),
  ok = file:write_file(MTFN, term_to_binary(Vals)).

stat(Txt) ->
  o_stat(standard_io, Txt, []).
stat(Txt, Args) ->
  o_stat(standard_io, Txt, Args).
estat(Txt) ->
  o_stat(standard_error, Txt, []).
estat(Txt, Args) ->
  o_stat(standard_error, Txt, Args).

abort(Msg) ->
  abort(Msg, []).
abort(Msg, Args) ->
  abort(Msg, Args, 100).
abort(Msg, Args, ErrNumber) ->
  estat(Msg, Args),
  halt(ErrNumber).

o_stat(IoDev, Txt, []) ->
  io:format(IoDev, Txt ++ "\n", []);
o_stat(IoDev, Txt, [Args]) when not is_list(Args) ->
  io:format(IoDev, Txt ++ "\n", [Args]);
o_stat(IoDev, Txt, Args) ->
  io:format(IoDev, Txt ++ "\n", Args).

emit_errs(Kind, Errs) ->
  io:format(standard_error, "---------- ~s ----------\n", [Kind]),
  [emit_file_err(E) || E <- Errs],
  io:format(standard_error, "\n", []).
emit_file_err({cust, Err}) ->
  io:format(standard_error, "~s\n", [Err]);
emit_file_err({File, Errs}) ->
  [io:format(standard_error, "~s | Line ~p | ~s\n",[File, Ln,
        Mod:format_error(Desc)]) || {Ln, Mod, Desc} <- Errs],
  [io:format(standard_error, "~s | ~s\n",[File,
        Mod:format_error(Desc)]) || {Mod, Desc} <- Errs].


% Compiles file if the target doesn't exist or if the source has been modified
% since it was last compiled.
%
% Returns one of:
% {ModifiedTime, {ok, Name, Warnings}}
% {ModifiedTime, {error, Errors, Warnings}}
%
ensure_compiled(Src, ModTimes, SrcDir, OutDir) ->
  FName = [SrcDir, "/", atom_to_list(Src), ".erl"],
  case {file:read_file_info(FName),
      proplists:get_value(Src, ModTimes, none),
      filelib:is_file([OutDir,"/",Src,".beam"])} of
    {{error, enoent}, _, _} ->
      {none, {error, {cust, "Missing source file-  " ++ lists:flatten(FName)},
          []}};
    {{error, Reason}, _, _} ->
      {none, {error, {cust, "Strange error " ++ atom_to_list(Reason) ++ " on file-  " ++
            lists:flatten(FName)}, []}};
    {{ok, FI}, _, false} ->    {FI#file_info.mtime, compiled(FName, OutDir)};
    {{ok, FI}, none, _} ->     {FI#file_info.mtime, compiled(FName, OutDir)};
    {{ok, FI}, ST, _} when ST >= FI#file_info.mtime -> {ST, {ok, Src, nochange}};
    {{ok, FI}, _, _} ->        {FI#file_info.mtime, compiled(FName, OutDir)}
  end.

compiled(File, OutDir) ->
  io:format(standard_error, "Compiling ~s\n", [File]),
  compile:file(File, [
      debug_info,
      return,
      {outdir, OutDir},
      warn_unused_import]).
